import cfg from '../../config.js'
import {
  Account,
  AccountBuilder,
  AgreementInfo,
  CekAlgorithm,
  DID,
  Document,
  EncryptedData,
  EncryptionAlgorithm,
  Resolver
} from '@iota/identity-wasm/node/identity_wasm.js'


/**
 * A `DigitalID` represents an identity with its own {@link Document}.
 * It offers high-level access to the IOTA Tangle, and
 * it is able to store its own secret keys through the {@link Account} and {@link Storage} API respectively.
 */
export abstract class DigitalID {
  protected static readonly builder = new AccountBuilder(cfg.iota.accountBuilderConfig)
  protected static resolver: Resolver
  protected static readonly resolverBuilder = Resolver.builder().clientConfig(cfg.iota.clientConfig)

  readonly account: Account

  protected constructor(account: Account) {
    this.account = account
    // await account.publish() # TOTO remove this from subclasses and put here
    // this.verifySelf() TODO can do when published to tangle
  }

  /**
   * Fetch and return a {@link DID} {@link Document} from the Tangle.
   * @param did {@link DID} to resolve.
   * @returns The {@link DID}'s {@link document}.
   */
  static async resolve(did: DID): Promise<Document> {
    return (await DigitalID.resolver.resolve(did)).intoDocument()
  }

  /**
   * Decrypt a message that has been signed with a public key from this ID.
   * @param encryptedMessage The signature of the message
   * @param agreement 
   * @returns 
   */
  async decryptMessage(encryptedMessage: EncryptedData, agreement: AgreementInfo) {
    return await this.account.decryptData(
      encryptedMessage,
      EncryptionAlgorithm.A256GCM(),
      CekAlgorithm.EcdhEs(agreement),
      '') // TODO key fragment
  }

  /**
   * Serialize the {@link Document} of this {@link DigitalID} as a {@link JSON} object.
   */
  toJSON() {
    return this.account.document().toJSON()
  }

  /**
   * Return a `string` representation of this account.
   */
  toString(): string {
    return JSON.stringify(this.toJSON(), null, 2)
  }

  /**
   * Verify that the {@link Document}'s signature was generated by a valid method. Also verify its syntax.
   */
  verifySelf(): void {
    this.account.document().verifyDocument(this.account.document())
  }
}